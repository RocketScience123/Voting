//Notice :
//The maximum number of token is computed as follows:
//10,000 (number of undergraduate students in UST) * 36 (average coins that assigned to each //student) * 1.3 (extra 30% for buffer, including for overloading, bonus, etc.) = 468,000

//This code is the basic code for the token that is used in our system.  It lays out the ground rule on the token (e.g. each approved free credit for 20 token)
pragma solidity >= 0.4.22 < 0.6.0;
contract ICO {
 
    //introducing the maximum number of tokens available for each student
    uint public max_tokens = 468000;  //maximum number of tokens, calculation below
    // conversion rate
    uint public credit_to_mytoken = 20; //for 1 approved free (as opposed to pre-registered) credit
    uint public total_tokens_given = 0; //number of tokens assigned
    // approved_credit is the maximum credits decided by ARRO for each student (can be increased if overloading is approved) 
    mapping(address => uint) approved_credit;
    mapping(address => uint) equity_tokens;
    // This function tells the equity of student in terms of tokens assigned

    function equity_in_tokens(address student) view public returns (uint) {
	 return equity_tokens[student]; // equity_tokens is resolved with mapping defined above against the student address.
	}

    // This function returns an approximate (ceiling) value because data type is uint. 
    function max_approved_credit(address student) view public returns (uint) {
	return approved_credit[student]; // approved_credit is resolved with mapping defined above. 
	}
    function increase_tokens(address student, uint credit_enrolled) public {
        
	// Check the condition: if tokens are available enough 
	require(credit_enrolled * credit_to_mytoken + total_tokens_given <= max_tokens, 'Token supply is not enough. Please try some less amount.');
	uint tokens_given = credit_enrolled * credit_to_mytoken;

	// update mapped data structure for equity_tokens
	equity_tokens[student] += tokens_given;
        // update the amount of total given tokens
	total_tokens_given += tokens_given;
   
	}

    function decrease_tokens(address student, uint tokens_used) public {
	// Check if the student has enough tokens that one is trying to use, require() provide a msg for invalid cases
	require(tokens_used <= equity_tokens[student], 'Do not have enough token. Please try with less amount.');
        // update variables
        equity_tokens[student] -= tokens_used;
        total_tokens_given -= tokens_used;
	}    
}
