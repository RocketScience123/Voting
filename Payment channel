// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.5.0 <0.7.0;

/// Opening of the payment channel
contract PaymentChannel {
    address payable public student;      // Students' account sending the coins.
    address payable public university;   // University's account receiving the coins.
    uint256 public expiration;  // Timeout when the course bidding period ends.

    constructor (address payable _university, uint256 duration)
        public
        payable
    {
        student = msg.sender;
        university = _university;
        expiration = now + duration;
    }
    
/// Closing the channel after all the payments from bidding were received
/// Univeristy will recieve the payment amounts,and the remainder will send to the students
    function close(uint256 amount, bytes memory signature) public {
        require(msg.sender == university); //Validation of message before closing the payment channel
        require(isValidSignature(amount, signature)); //Validation of signature before closing the payment channel
        university.transfer(amount);
        selfdestruct(student);
    }

/// When the university does not close the channel and the timeout has been triggered
/// the contract will be terminated and the coins will be released back to the students
    function claimTimeout() public {
        require(now >= expiration);
        selfdestruct(student);
    }

/// The function isValidSignature is used to verify the signature from the students by the university
    function isValidSignature(uint256 amount, bytes memory signature)
        internal
        view
        returns (bool)
    {
        bytes32 message = prefixed(keccak256(abi.encodePacked(this, amount)));

        // check that the signature is from the students
        return recoverSigner(message, signature) == student;
    }
    
/// Three function splitSignature, recoverSigner, prefixed are the internal process of the signature verification
    function splitSignature(bytes memory sig)
        internal
        pure
        returns (uint8 v, bytes32 r, bytes32 s)
    {
        require(sig.length == 65);

        assembly {
            // first 32 bytes, after the length prefix
            r := mload(add(sig, 32))
            // second 32 bytes
            s := mload(add(sig, 64))
            // final byte (first byte of the next 32 bytes)
            v := byte(0, mload(add(sig, 96)))
        }

        return (v, r, s);
    }

    function recoverSigner(bytes32 message, bytes memory sig)
        internal
        pure
        returns (address)
    {
        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);

        return ecrecover(message, v, r, s);
    }
    
    function prefixed(bytes32 hash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }
}
