pragma solidity >=0.4.24 <0.6.0;


/// This contract verifies the signature and prevent replay attacks.
/// Replay attack is prevented by copying the bid-sender's address into the message
/// Therefore there is only one message containing the contract address will be accepted
contract Verifying_Signature {
    address student = msg.sender;

    mapping(uint256 => bool) usedNonces;

    constructor() public payable {}
    ///This function protects against replay attack by including the contract's address in the message
    ///and only messages containing the contract's address itself will be accepted.
    function claimBid(uint256 amount, uint256 nonce, bytes memory signature) public {
        require(!usedNonces[nonce]);
        usedNonces[nonce] = true;

        // this recreates the message that was signed on the client
        bytes32 message = prefixed(keccak256(abi.encodePacked(msg.sender, amount, nonce, this)));

        require(recoverSigner(message, signature) == student);

        msg.sender.transfer(amount);
    }

    /// destroy the contract and reclaim the leftover bids.
    function kill() public {
        require(msg.sender == student);
        selfdestruct(msg.sender);
    }

    /// This function is about spliting the signatures into 3 parts: r,s,v 
    /// r and s are the outputs of an ECDSA signature, and v is the recovery id
    function splitSignature(bytes memory sig)
        internal
        pure
        returns (uint8 v, bytes32 r, bytes32 s)
    {
        require(sig.length == 65);

        assembly {
            // first 32 bytes, after the length prefix.
            r := mload(add(sig, 32))
            // second 32 bytes.
            s := mload(add(sig, 64))
            // final byte (first byte of the next 32 bytes).
            v := byte(0, mload(add(sig, 96)))
        }

        return (v, r, s);
    }
    
    function recoverSigner(bytes32 message, bytes memory sig)
        internal
        pure
        returns (address)
    {
        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);

        return ecrecover(message, v, r, s);
    }

    /// builds a prefixed hash to mimic the behavior of eth_sign.
    function prefixed(bytes32 hash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }
}
